一、网络
1. socket简介
	socket(简称 套接字) 是进程间通信的一种方式，它与其他进程间通信的一个主要不同是：
		它能实现不同主机间的进程间通信，我们网络上各种各样的服务大多都是基于 Socket 来完成通信的
		例如我们每天浏览网页、QQ 聊天、收发 email 等等
2. 创建socket
	在 Python 中 使用socket 模块的函数 socket 就可以完成：

		import socket
		socket.socket(AddressFamily, Type)
		说明：
			函数 socket.socket 创建一个 socket，该函数带有两个参数：

	Address Family：可以选择 AF_INET（用于 Internet 进程间通信） 或者 AF_UNIX（用于同一台机器进程间通信）,实际工作中常用AF_INET
	Type：套接字类型，可以是 SOCK_STREAM（流式套接字，主要用于 TCP 协议）或者 SOCK_DGRAM（数据报套接字，主要用于 UDP 协议）
	
	1)创建一个tcp socket（tcp套接字）
		import socket
		# 创建tcp的套接字
		s = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
		# ...这里是使用套接字的功能（省略）...
		# 不用的时候，关闭套接字
		s.close()
	
	2)创建一个udp socket（udp套接字）
		import socket
		# 创建udp的套接字
		s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
		# ...这里是使用套接字的功能（省略）...
		# 不用的时候，关闭套接字
		s.close()
	备注：
		1)套接字使用流程 与 文件的使用流程很类似
		2)创建套接字
		3)使用套接字收/发数据
		4)关闭套接字

2.1 udp网络程序-发送、接收数据
2.1.1. udp网络程序-发送数据
	创建一个基于udp的网络程序流程很简单，具体步骤如下：
		1)创建客户端套接字
		2)发送/接收数据
		3)关闭套接字
	代码如下：
	#coding=utf-8
	from socket import *

	# 1. 创建udp套接字
	udp_socket = socket(AF_INET, SOCK_DGRAM)

	# 2. 准备接收方的地址
	# '192.168.1.103'表示目的ip地址
	# 8080表示目的端口
	dest_addr = ('192.168.1.103', 8080)  # 注意 是元组，ip是字符串，端口是数字

	# 3. 从键盘获取数据
	send_data = input("请输入要发送的数据:")

	# 4. 发送数据到指定的电脑上的指定程序中
	udp_socket.sendto(send_data.encode('utf-8'), dest_addr)

	# 5. 关闭套接字
	udp_socket.close()

2.1.2 udp网络程序-发送、接收数据
	#coding=utf-8

	from socket import *

	# 1. 创建udp套接字
	udp_socket = socket(AF_INET, SOCK_DGRAM)

	# 2. 准备接收方的地址
	dest_addr = ('192.168.236.129', 8080)

	# 3. 从键盘获取数据
	send_data = input("请输入要发送的数据:")

	# 4. 发送数据到指定的电脑上
	udp_socket.sendto(send_data.encode('utf-8'), dest_addr)

	# 5. 等待接收对方发送的数据
	recv_data = udp_socket.recvfrom(1024)  # 1024表示本次接收的最大字节数

	# 6. 显示对方发送的数据
	# 接收到的数据recv_data是一个元组
	# 第1个元素是对方发送的数据
	# 第2个元素是对方的ip和端口
	print(recv_data[0].decode('gbk'))
	print(recv_data[1])

	# 7. 关闭套接字
	udp_socket.close()

2.2 python3中的编码与解码
	1)str->bytes:encode编码
	2)bytes->str:decode解码
	字符串通过编码成为字节码，字节码通过解码成为字符串。
	其中decode()与encode()方法可以接受参数，其声明分别为:
		bytes.decode(encoding="utf-8", errors="strict")
		str.encode(encoding="utf-8", errors="strict")
		其中的encoding是指在解码编码过程中使用的编码(此处指“编码方案”是名词)，errors是指错误的处理方案。
	
2.3 udp中绑定端口的问题
	1) 绑定信息
		一般情况下，在一台电脑上运行的网络程序有很多，为了不与其他的网络程序占用同一个端口号，往往在编程中，udp的端口号一般不绑定
		但是如果需要做成一个服务器端的程序的话，是需要绑定的，想想看这又是为什么呢？
		如果报警电话每天都在变，想必世界就会乱了，所以一般服务性的程序，往往需要一个固定的端口号，这就是所谓的端口绑定
	2)绑定示例
		#coding=utf-8
		from socket import *

		# 1. 创建套接字
		udp_socket = socket(AF_INET, SOCK_DGRAM)

		# 2. 绑定本地的相关信息，如果一个网络程序不绑定，则系统会随机分配
		local_addr = ('', 7788) #  ip地址和端口号，ip一般不用写，表示本机的任何一个ip
		udp_socket.bind(local_addr)

		# 3. 等待接收对方发送的数据
		recv_data = udp_socket.recvfrom(1024) #  1024表示本次接收的最大字节数

		# 4. 显示接收到的数据
		print(recv_data[0].decode('gbk'))

		# 5. 关闭套接字
		udp_socket.close()
2.4 应用udp聊天室
	import socket
	def send_msg(udp_socket):
		"""获取键盘数据，并将其发送给对方"""
		# 1. 从键盘输入数据
		msg = input("\n请输入要发送的数据:")
		# 2. 输入对方的ip地址
		dest_ip = input("\n请输入对方的ip地址:")
		# 3. 输入对方的port
		dest_port = int(input("\n请输入对方的port:"))
		# 4. 发送数据
		udp_socket.sendto(msg.encode("utf-8"), (dest_ip, dest_port))
	def recv_msg(udp_socket):
		"""接收数据并显示"""
		# 1. 接收数据
		recv_msg = udp_socket.recvfrom(1024)
		# 2. 解码
		recv_ip = recv_msg[1]
		recv_msg = recv_msg[0].decode("utf-8")
		# 3. 显示接收到的数据
		print(">>>%s:%s" % (str(recv_ip), recv_msg))
	def main():
		# 1. 创建套接字
		udp_socket = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
		# 2. 绑定本地信息
		udp_socket.bind(("", 7890))
		while True:
			# 3. 选择功能
			print("="*30)
			print("1:发送消息")
			print("2:接收消息")
			print("="*30)
			op_num = input("请输入要操作的功能序号:")

			# 4. 根据选择调用相应的函数
			if op_num == "1":
				send_msg(udp_socket)
			elif op_num == "2":
				recv_msg(udp_socket)
			else:
				print("输入有误，请重新输入...")

	if __name__ == "__main__":
		main()
		
		
3  网络tcp
3.1 tcp简介
	TCP协议，传输控制协议（英语：Transmission Control Protocol，缩写为 TCP）是一种面向连接的、可靠的、基于字节流的传输层通信协议，由IETF的RFC 793定义。
	TCP通信需要经过创建连接、数据传送、终止连接三个步骤。
	TCP通信模型中，在通信开始之前，一定要先建立相关的链接，才能发送数据，类似于生活中，"打电话""
tcp特点：
	1)面向连接
		通信双方必须先建立连接才能进行数据的传输，双方都必须为该连接分配必要的系统内核资源，以管理连接的状态和连接上的传输。
		双方间的数据传输都可以通过这一个连接进行。
		完成数据交换后，双方必须断开此连接，以释放系统资源。
		这种连接是一对一的，因此TCP不适用于广播的应用程序，基于广播的应用程序请使用UDP协议。
	2)可靠传输
		1)TCP采用发送应答机制
		  TCP发送的每个报文段都必须得到接收方的应答才认为这个TCP报文段传输成功
		2)超时重传
		   发送端发出一个报文段之后就启动定时器，如果在定时时间内没有收到应答就重新发送这个报文段。
		   TCP为了保证不发生丢包，就给每个包一个序号，同时序号也保证了传送到接收端实体的包的按序接收。然后接收端实体对已成功收到的包发回一个相应的确认（ACK）；如果发送端实体在合理的往返时延（RTT）内未收到确认，那么对应的数据包就被假设为已丢失将会被进行重传。
		3错误校验
		    TCP用一个校验和函数来检验数据是否有错误；在发送和接收时都要计算校验和。
		4)流量控制和阻塞管理
		   流量控制用来避免主机发送得过快而使接收方来不及完全收下。
	
	TCP与UDP的不同点:
		1)面向连接（确认有创建三方交握，连接已创建才作传输。）
		2)有序数据传输
		3)重发丢失的数据包
		4)舍弃重复的数据包
		5)无差错的数据传输
		6)阻塞/流量控制
		
3.2 tcp客户端
	tcp的客户端要比服务器端简单很多，如果说服务器端是需要自己买手机、查手机卡、设置铃声、等待别人打电话流程的话，
	那么客户端就只需要找一个电话亭，拿起电话拨打即可，流程要少很多
	示例代码：
	from socket import *

	# 创建socket
	tcp_client_socket = socket(AF_INET, SOCK_STREAM)

	# 目的信息
	server_ip = input("请输入服务器ip:")
	server_port = int(input("请输入服务器port:"))

	# 链接服务器
	tcp_client_socket.connect((server_ip, server_port))

	# 提示用户输入数据
	send_data = input("请输入要发送的数据：")

	tcp_client_socket.send(send_data.encode("gbk"))

	# 接收对方发送过来的数据，最大接收1024个字节
	recvData = tcp_client_socket.recv(1024)
	print('接收到的数据为:', recvData.decode('gbk'))

	# 关闭套接字
	tcp_client_socket.close()
	
	
3.3 tcp服务器端
   如同上面的电话机过程一样，在程序中，如果想要完成一个tcp服务器的功能，需要的流程如下：
		1)socket创建一个套接字
		2)bind绑定ip和port
		3)listen使套接字变为可以被动链接
		4)accept等待客户端的链接
		5)recv/send接收发送数据
    一个很简单的tcp服务器如下：
	from socket import *
	# 创建socket
	tcp_server_socket = socket(AF_INET, SOCK_STREAM)
	# 本地信息
	address = ('', 7788)
	# 绑定
	tcp_server_socket.bind(address)
	# 使用socket创建的套接字默认的属性是主动的，使用listen将其变为被动的，这样就可以接收别人的链接了
	tcp_server_socket.listen(128)
	# 如果有新的客户端来链接服务器，那么就产生一个新的套接字专门为这个客户端服务
	# client_socket用来为这个客户端服务
	# tcp_server_socket就可以省下来专门等待其他新客户端的链接
	client_socket, clientAddr = tcp_server_socket.accept()
	# 接收对方发送过来的数据
	recv_data = client_socket.recv(1024)  # 接收1024个字节
	print('接收到的数据为:', recv_data.decode('gbk'))
	# 发送一些数据到客户端
	client_socket.send("thank you !".encode('gbk'))
	# 关闭为这个客户端服务的套接字，只要关闭了，就意味着为不能再为这个客户端服务了，如果还需要服务，只能再次重新连接
	client_socket.close()
	
	//注意 ：
		1)recv函数与recvfrom()的区别是 recvfrom()带有返回的IP地址等信息
		2)recv()函数只是返回的客户端发来的数据
		3)可以通过recv()函数返回数据是否为空,判断客户端是否断开连接
	
3.4 tcp服务器端循环发送消息
	import socket
	def main():
		# 创建socket对象
		tcp_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
		# 绑定信息
		localtion_address = ("",7788)
		tcp_socket.bind(localtion_address)
		# 监听 使用socket创建的套接字是主动的  使用listen让其变为被动
		tcp_socket.listen(128)
		# 等待客户端连接
		while True:
			print("等待新的客户端连接")
			new_socket, address = tcp_socket.accept()
			print("连接的客户端信息为："+str(address))
			while True:
				recv_data = new_socket.recv(1024)
				if recv_data:
					print("客户端发来的信息为："+recv_data.decode("gbk"))
					new_socket.send("您好，这里是服务端，收到你的信息".encode("gbk"))
				else:
					break
			new_socket.close()
		tcp_socket.close()
	if __name__ == "__main__":
		main()
		
		
3.5 tcp注意点

	1)tcp服务器一般情况下都需要绑定，否则客户端找不到这个服务器
	2)tcp客户端一般不绑定，因为是主动链接服务器，所以只要确定好服务器的ip、port等信息就好，本地客户端可以随机
	3)tcp服务器中通过listen可以将socket创建出来的主动套接字变为被动的，这是做tcp服务器时必须要做的
	4)当客户端需要链接服务器时，就需要使用connect进行链接，udp是不需要链接的而是直接发送，但是tcp必须先链接，只有链接成功才能通信
	5)当一个tcp客户端连接服务器时，服务器端会有1个新的套接字，这个套接字用来标记这个客户端，单独为这个客户端服务
	6)listen后的套接字是被动套接字，用来接收新的客户端的链接请求的，而accept返回的新套接字是标记这个新客户端的
	7)关闭listen后的套接字意味着被动套接字关闭了，会导致新的客户端不能够链接服务器，但是之前已经链接成功的客户端正常通信。
	8)关闭accept返回的套接字意味着这个客户端已经服务完毕
	9)当客户端的套接字调用close后，服务器端会recv解堵塞，并且返回的长度为0，因此服务器可以通过返回数据的长度来区别客户端是否已经下线

3.6 tcp文件下载器案例
	服务器 参考代码如下:
	from socket import *
	import sys


	def get_file_content(file_name):
		"""获取文件的内容"""
		try:
			with open(file_name, "rb") as f:
				content = f.read()
			return content
		except:
			print("没有下载的文件:%s" % file_name)


	def main():

		if len(sys.argv) != 2:
			print("请按照如下方式运行：python3 xxx.py 7890")
			return
		else:
			# 运行方式为python3 xxx.py 7890
			port = int(sys.argv[1])


		# 创建socket
		tcp_server_socket = socket(AF_INET, SOCK_STREAM)
		# 本地信息
		address = ('', port)
		# 绑定本地信息
		tcp_server_socket.bind(address)
		# 将主动套接字变为被动套接字
		tcp_server_socket.listen(128)

		while True:
			# 等待客户端的链接，即为这个客户端发送文件
			client_socket, clientAddr = tcp_server_socket.accept()
			# 接收对方发送过来的数据
			recv_data = client_socket.recv(1024)  # 接收1024个字节
			file_name = recv_data.decode("utf-8")
			print("对方请求下载的文件名为:%s" % file_name)
			file_content = get_file_content(file_name)
			# 发送文件的数据给客户端
			# 因为获取打开文件时是以rb方式打开，所以file_content中的数据已经是二进制的格式，因此不需要encode编码
			if file_content:
				client_socket.send(file_content)
			# 关闭这个套接字
			client_socket.close()

		# 关闭监听套接字
		tcp_server_socket.close()


	if __name__ == "__main__":
		main()
		
		
		
	客户端 参考代码如下:
	from socket import *


	def main():

		# 创建socket
		tcp_client_socket = socket(AF_INET, SOCK_STREAM)

		# 目的信息
		server_ip = input("请输入服务器ip:")
		server_port = int(input("请输入服务器port:"))

		# 链接服务器
		tcp_client_socket.connect((server_ip, server_port))

		# 输入需要下载的文件名
		file_name = input("请输入要下载的文件名：")

		# 发送文件下载请求
		tcp_client_socket.send(file_name.encode("utf-8"))

		# 接收对方发送过来的数据，最大接收1024个字节（1K）
		recv_data = tcp_client_socket.recv(1024)
		# print('接收到的数据为:', recv_data.decode('utf-8'))
		# 如果接收到数据再创建文件，否则不创建
		if recv_data:
			with open("[接收]"+file_name, "wb") as f:
				f.write(recv_data)

		# 关闭套接字
		tcp_client_socket.close()


	if __name__ == "__main__":
		main()	
		
		
二、 多任务线程
1. 线程（重点）
	python的thread模块是比较底层的模块，python的threading模块是对thread做了一些包装的，可以更加方便的被使用

	1)使用threading模块
	单线程执行
		#coding=utf-8
		import time

		def saySorry():
			print("亲爱的，我错了，我能吃饭了吗？")
			time.sleep(1)

		if __name__ == "__main__":
			for i in range(5):
				saySorry()
	多线程执行
		#coding=utf-8
		import threading
		import time

		def saySorry():
			print("亲爱的，我错了，我能吃饭了吗？")
			time.sleep(1)

		if __name__ == "__main__":
			for i in range(5):
				t = threading.Thread(target=saySorry)
				t.start() #启动线程，即让线程开始执行
2. 主线程会等待所有的子线程结束后才结束

3. 查看线程数量
	#coding=utf-8
	import threading
	from time import sleep,ctime

	def sing():
		for i in range(3):
			print("正在唱歌...%d"%i)
			sleep(1)

	def dance():
		for i in range(3):
			print("正在跳舞...%d"%i)
			sleep(1)

	if __name__ == '__main__':
		print('---开始---:%s'%ctime())

		t1 = threading.Thread(target=sing)
		t2 = threading.Thread(target=dance)

		t1.start()
		t2.start()

		while True:
			length = len(threading.enumerate())
			print('当前运行的线程数为：%d'%length)
			if length<=1:
				break

			sleep(0.5)	
4. 线程注意点
	1)线程执行代码的封装
	通过上一小节，能够看出，通过使用threading模块能完成多任务的程序开发，为了让每个线程的封装性更完美，所以使用threading模块时，往往会定义一个新的子类class，
	只要继承threading.Thread就可以了，然后重写run方法
		示例如下：
		#coding=utf-8
		import threading
		import time
		class MyThread(threading.Thread):
			def run(self):
				for i in range(3):
					time.sleep(1)
					msg = "I'm "+self.name+' @ '+str(i) #name属性中保存的是当前线程的名字
					print(msg)


		if __name__ == '__main__':
			t = MyThread()
			t.start()
	//注意:
		python的threading.Thread类有一个run方法，用于定义线程的功能函数，可以在自己的线程类中覆盖该方法。
		而创建自己的线程实例后，通过Thread类的start方法，可以启动该线程，交给python虚拟机进行调度，当该线程获得执行的机会时，就会调用run方法执行线程。
	2)线程的执行顺序
	//注意:
		从代码和执行结果我们可以看出，多线程程序的执行顺序是不确定的。
		当执行到sleep语句时，线程将被阻塞（Blocked），到sleep结束后，线程进入就绪（Runnable）状态，等待调度。
		而线程调度将自行选择一个线程执行。上面的代码中只能保证每个线程都运行完整个run函数，但是线程的启动顺序、run函数中每次循环的执行顺序都不能确定。

	3)总结
	每个线程默认有一个名字，尽管上面的例子中没有指定线程对象的name，但是python会自动为线程指定一个名字。
	当线程的run()方法结束时该线程完成。
	无法控制线程调度程序，但可以通过别的方式来影响线程调度的方式。
	
5. 多线程-共享全局变量
		from threading import Thread
		import time
		g_num = 100
		def work1():
			global g_num
			for i in range(3):
				g_num += 1
			print("----in work1, g_num is %d---"%g_num)
		def work2():
			global g_num
			print("----in work2, g_num is %d---"%g_num)
		print("---线程创建之前g_num is %d---"%g_num)
		t1 = Thread(target=work1)
		t1.start()
		#延时一会，保证t1线程中的事情做完
		time.sleep(1)
		t2 = Thread(target=work2)
		t2.start()
		运行结果:
		---线程创建之前g_num is 100---
		----in work1, g_num is 103---
		----in work2, g_num is 103---
	2)列表当做实参传递到线程中
	from threading import Thread
	import time
	def work1(nums):
		nums.append(44)
		print("----in work1---",nums)
	def work2(nums):
		#延时一会，保证t1线程中的事情做完
		time.sleep(1)
		print("----in work2---",nums)
	g_nums = [11,22,33]
	t1 = Thread(target=work1, args=(g_nums,))
	t1.start()
	t2 = Thread(target=work2, args=(g_nums,))
	t2.start()
	运行结果:
	----in work1--- [11, 22, 33, 44]
	----in work2--- [11, 22, 33, 44]
	总结：
	1)在一个进程内的所有线程共享全局变量，很方便在多个线程间共享数据
	2)缺点就是，线程是对全局变量随意遂改可能造成多线程之间对全局变量的混乱（即线程非安全）
	3)如果多个线程同时对同一个全局变量操作，会出现资源竞争问题，从而数据结果会不正确	
	
6 互斥锁
6.1 介绍
	1)当多个线程几乎同时修改某一个共享数据的时候，需要进行同步控制
	2)线程同步能够保证多个线程安全访问竞争资源，最简单的同步机制是引入互斥锁。
	3)互斥锁为资源引入一个状态：锁定/非锁定
	4)某个线程要更改共享数据时，先将其锁定，此时资源的状态为“锁定”，其他线程不能更改；
		直到该线程释放资源，将资源的状态变成“非锁定”，其他的线程才能再次锁定该资源。
		互斥锁保证了每次只有一个线程进行写入操作，从而保证了多线程情况下数据的正确性。
		
	python中使用锁：
		threading模块中定义了Lock类，可以方便的处理锁定：

		# 创建锁
		mutex = threading.Lock()

		# 锁定
		mutex.acquire()

		# 释放
		mutex.release()
	//注意：
		如果这个锁之前是没有上锁的，那么acquire不会堵塞
		如果在调用acquire对这个锁上锁之前 它已经被 其他线程上了锁，那么此时acquire会堵塞，直到这个锁被解锁为止
		
	使用互斥锁完成2个线程对同一个全局变量各加100万次的操作
	import threading
	import time

	g_num = 0

	def test1(num):
		global g_num
		for i in range(num):
			mutex.acquire()  # 上锁
			g_num += 1
			mutex.release()  # 解锁

		print("---test1---g_num=%d"%g_num)

	def test2(num):
		global g_num
		for i in range(num):
			mutex.acquire()  # 上锁
			g_num += 1
			mutex.release()  # 解锁

		print("---test2---g_num=%d"%g_num)
		
		
6.2 创建互斥锁
	# 创建一个互斥锁
	# 默认是未上锁的状态
	mutex = threading.Lock()

	# 创建2个线程，让他们各自对g_num加1000000次
	p1 = threading.Thread(target=test1, args=(1000000,))
	p1.start()

	p2 = threading.Thread(target=test2, args=(1000000,))
	p2.start()

	# 等待计算完成
	while len(threading.enumerate()) != 1:
		time.sleep(1)

	print("2个线程对同一个全局变量操作之后的最终结果是:%s" % g_num)
	运行结果：

	---test1---g_num=1909909
	---test2---g_num=2000000
	
	2个线程对同一个全局变量操作之后的最终结果是:2000000
	可以看到最后的结果，加入互斥锁后，其结果与预期相符。

	上锁解锁过程
		当一个线程调用锁的acquire()方法获得锁时，锁就进入“locked”状态。
		每次只有一个线程可以获得锁。如果此时另一个线程试图获得这个锁，该线程就会变为“blocked”状态，称为“阻塞”，直到拥有锁的线程调用锁的release()方法释放锁之后，锁进入“unlocked”状态。
		线程调度程序从处于同步阻塞状态的线程中选择一个来获得锁，并使得该线程进入运行（running）状态。

	//注意：
	锁的好处：
		确保了某段关键代码只能由一个线程从头到尾完整地执行
	锁的坏处：
		阻止了多线程并发执行，包含锁的某段代码实际上只能以单线程模式执行，效率就大大地下降了
		由于可以存在多个锁，不同的线程持有不同的锁，并试图获取对方持有的锁时，可能会造成死锁
			